{"version":3,"file":"dragreorder.min.js","sources":["../src/dragreorder.js"],"sourcesContent":["'use strict';\nimport $ from 'jquery';\nimport drag from 'core/dragdrop';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport {getString} from 'core/str';\nimport {prefetchString} from 'core/prefetch';\n\nexport default class DragReorder {\n    // Class variables handling state.\n    config = {reorderStart: undefined, reorderEnd: undefined}; // Config object with some basic definitions.\n    dragStart = null; // Information about when and where the drag started.\n    originalOrder = null; // Array of ids that's used to compare the state after the drag event finishes.\n\n    // DOM Nodes and jQuery representations.\n    orderList = null; // Order list (HTMLElement).\n    itemDragging = null; // Item being moved by dragging (jQuery object).\n    proxy = null; // Drag proxy (jQuery object).\n\n    constructor(config) {\n        // Bring in the config to our state.\n        this.config = config;\n        this.sourceContainer = null;\n        // Get the list we'll be working with this time.\n        this.orderList = document.querySelector(this.config.list);\n\n        this.startListeners();\n    }\n\n    /**\n     * Start the listeners for the list.\n     */\n    startListeners() {\n        /**\n         * Handle mousedown or touchstart events on the list.\n         *\n         * @param {Event} e The event.\n         */\n        const pointerHandle = e => {\n            if (e.target.closest(this.config.item) && !e.target.closest(this.config.actionButton)) {\n                this.itemDragging = $(e.target.closest(this.config.item));\n                const details = drag.prepare(e);\n                if (details.start) {\n                    this.startDrag(e, details);\n                }\n            }\n        };\n        // Set up the list listeners for moving list items around.\n        this.orderList.addEventListener('mousedown', pointerHandle);\n        this.orderList.addEventListener('touchstart', pointerHandle);\n        this.orderList.addEventListener('click', this.itemMovedByClick.bind(this));\n    }\n\n    /**\n     * Start dragging.\n     *\n     * @param {Event} e The event which is either mousedown or touchstart.\n     * @param {Object} details Object with start (boolean flag) and x, y (only if flag true) values\n     */\n    startDrag(e, details) {\n        this.dragStart = {\n            time: new Date().getTime(),\n            x: details.x,\n            y: details.y\n        };\n\n        this.sourceContainer = this.itemDragging.closest('.sortablelist'); // Сохраняем исходный контейнер.\n\n        if (typeof this.config.reorderStart !== 'undefined') {\n            this.config.reorderStart(this.sourceContainer, this.itemDragging);\n        }\n\n        this.originalOrder = this.getCurrentOrder();\n\n        Templates.renderForPromise('qtype_ddingroups/proxyhtml', {\n            itemHtml: this.itemDragging.html(),\n            itemClassName: this.itemDragging.attr('class'),\n            listClassName: this.orderList.classList.toString(),\n            proxyStyles: [\n                `width: ${this.itemDragging.outerWidth()}px;`,\n                `height: ${this.itemDragging.outerHeight()}px;`,\n            ].join(' '),\n        }).then(({ html, js }) => {\n            this.proxy = $(Templates.appendNodeContents(document.body, html, js)[0]);\n            this.proxy.css(this.itemDragging.offset());\n\n            // Добавляем класс для визуализации перетаскивания.\n            if (this.itemDragging) {\n                this.itemDragging.addClass(this.config.itemMovingClass);\n            }\n\n            drag.start(e, this.proxy, this.dragMove.bind(this), this.dragEnd.bind(this));\n        }).catch(Notification.exception);\n    }\n\n\n\n    /**\n     * Move the proxy to the current mouse position.\n     */\n    dragMove() {\n        let targetGroup = null;\n        // Определяем, над какой зоной (группой) находится элемент.\n        document.querySelectorAll('.sortablelist').forEach(container => {\n            const rect = container.getBoundingClientRect();\n            const proxyRect = this.proxy[0].getBoundingClientRect();\n            if (\n                proxyRect.left < rect.right &&\n                proxyRect.right > rect.left &&\n                proxyRect.top < rect.bottom &&\n                proxyRect.bottom > rect.top\n            ) {\n                targetGroup = container;\n            }\n        });\n\n        // Сохраняем целевую группу, если она определена.\n        this.targetGroup = targetGroup;\n    }\n\n\n    /**\n     * Update proxy's position.\n     */\n    updateProxy() {\n        const items = [...this.orderList.querySelectorAll(this.config.item)];\n        for (let i = 0; i < items.length; ++i) {\n            if (this.itemDragging[0] === items[i]) {\n                this.proxy.find('li').attr('value', i + 1);\n                break;\n            }\n        }\n    }\n\n    /**\n     * End dragging and move item to appropriate group.\n     */\n    dragEnd() {\n        if (typeof this.config.reorderEnd !== 'undefined') {\n            this.config.reorderEnd(this.itemDragging.closest(this.config.list), this.itemDragging);\n        }\n\n        if (this.targetGroup) {\n            // Если целевая группа определена, вставляем элемент в нее.\n            const groupList = this.targetGroup.querySelector('.group-answers') || this.targetGroup;\n            if (!groupList.contains(this.itemDragging[0])) {\n                groupList.appendChild(this.itemDragging[0]);\n            }\n        } else {\n            // Если элемент не находится над группой, возвращаем его в исходный контейнер.\n            this.sourceContainer.append(this.itemDragging[0]);\n        }\n\n        // Обновляем JSON только если порядок изменился.\n        if (!this.arrayEquals(this.originalOrder, this.getCurrentOrder())) {\n            const currentGroup = this.itemDragging.closest('.group-box')?.id || 'general-box';\n            const newOrder = this.getCurrentOrder().map(itemId => ({\n                id: itemId,\n                group: currentGroup,\n            }));\n            this.config.reorderDone(this.sourceContainer, this.itemDragging, newOrder);\n            getString('moved', 'qtype_ddingroups', {\n                item: this.itemDragging.find('[data-itemcontent]').text().trim(),\n                position: this.itemDragging.index() + 1,\n                total: this.orderList.querySelectorAll(this.config.item).length\n            }).then((str) => {\n                this.config.announcementRegion.innerHTML = str;\n            });\n        }\n\n        // Убираем визуальные эффекты.\n        this.proxy.remove();\n        this.proxy = null;\n\n        // Удаляем класс itemMovingClass (item-moving).\n        if (this.itemDragging) {\n            this.itemDragging.removeClass(this.config.itemMovingClass); // jQuery метод.\n            this.itemDragging[0].classList.remove(this.config.itemMovingClass); // Явное удаление через DOM.\n        }\n\n        // Сбрасываем состояние.\n        this.itemDragging = null;\n        this.dragStart = null;\n        this.targetGroup = null; // Сбрасываем целевую группу.\n    }\n\n\n\n    midX(node) {\n        return node.offset().left + node.outerWidth() / 2;\n    }\n    midY(node) {\n        return node.offset().top + node.outerHeight() / 2;\n    }\n    distanceBetweenElements(element) {\n        const [e1, e2] = [$(element), $(this.proxy)];\n        const [dx, dy] = [this.midX(e1) - this.midX(e2), this.midY(e1) - this.midY(e2)];\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n    getCurrentOrder() {\n        return this.itemDragging.closest(this.config.list).find(this.config.item).map(\n            (index, item) => {\n                return this.config.idGetter(item);\n            }).get();\n    }\n    arrayEquals(a1, a2) {\n        return a1.length === a2.length &&\n            a1.every((v, i) => {\n                return v === a2[i];\n            }); }\n    static init(config) {\n        const lists = config.lists;\n        const responseid = config.responseid;\n        lists.forEach(list => {\n            new DragReorder({\n                actionButton: '[data-action]',\n                announcementRegion: document.querySelector(`#${list}-announcement`),\n                list: `ul#${list}`,\n                item: 'li.sortableitem',\n                itemMovingClass: \"current-drop\",\n                idGetter: item => {\n                    return item.id;\n                },\n                // eslint-disable-next-line no-unused-vars\n                reorderDone: (list, item, newOrder) => {\n                    const response = {};\n                    document.querySelectorAll('.group-box, #general-box').forEach(container => {\n                        const groupId = container.id;\n                        response[groupId] = Array.from(container.querySelectorAll('li.sortableitem')).map(item => item.id);\n                    });\n\n                    $('input#' + responseid)[0].value = JSON.stringify(response);\n                }\n            });\n        });\n        prefetchString('qtype_ddingroups', 'moved');\n    }\n}\n"],"names":["DragReorder","constructor","config","reorderStart","undefined","reorderEnd","sourceContainer","orderList","document","querySelector","this","list","startListeners","pointerHandle","e","target","closest","item","actionButton","itemDragging","details","drag","prepare","start","startDrag","addEventListener","itemMovedByClick","bind","dragStart","time","Date","getTime","x","y","originalOrder","getCurrentOrder","renderForPromise","itemHtml","html","itemClassName","attr","listClassName","classList","toString","proxyStyles","outerWidth","outerHeight","join","then","_ref","js","proxy","Templates","appendNodeContents","body","css","offset","addClass","itemMovingClass","dragMove","dragEnd","catch","Notification","exception","targetGroup","querySelectorAll","forEach","container","rect","getBoundingClientRect","proxyRect","left","right","top","bottom","updateProxy","items","i","length","find","groupList","contains","appendChild","append","arrayEquals","currentGroup","id","newOrder","map","itemId","group","reorderDone","text","trim","position","index","total","str","announcementRegion","innerHTML","remove","removeClass","midX","node","midY","distanceBetweenElements","element","e1","e2","dx","dy","Math","sqrt","idGetter","get","a1","a2","every","v","lists","responseid","response","groupId","Array","from","value","JSON","stringify"],"mappings":"2tBAQqBA,YAWjBC,YAAYC,sCATH,CAACC,kBAAcC,EAAWC,gBAAYD,qCACnC,2CACI,uCAGJ,0CACG,mCACP,WAICF,OAASA,YACTI,gBAAkB,UAElBC,UAAYC,SAASC,cAAcC,KAAKR,OAAOS,WAE/CC,iBAMTA,uBAMUC,cAAgBC,OACdA,EAAEC,OAAOC,QAAQN,KAAKR,OAAOe,QAAUH,EAAEC,OAAOC,QAAQN,KAAKR,OAAOgB,cAAe,MAC9EC,cAAe,mBAAEL,EAAEC,OAAOC,QAAQN,KAAKR,OAAOe,aAC7CG,QAAUC,kBAAKC,QAAQR,GACzBM,QAAQG,YACHC,UAAUV,EAAGM,gBAKzBb,UAAUkB,iBAAiB,YAAaZ,oBACxCN,UAAUkB,iBAAiB,aAAcZ,oBACzCN,UAAUkB,iBAAiB,QAASf,KAAKgB,iBAAiBC,KAAKjB,OASxEc,UAAUV,EAAGM,cACJQ,UAAY,CACbC,MAAM,IAAIC,MAAOC,UACjBC,EAAGZ,QAAQY,EACXC,EAAGb,QAAQa,QAGV3B,gBAAkBI,KAAKS,aAAaH,QAAQ,sBAET,IAA7BN,KAAKR,OAAOC,mBACdD,OAAOC,aAAaO,KAAKJ,gBAAiBI,KAAKS,mBAGnDe,cAAgBxB,KAAKyB,qCAEhBC,iBAAiB,6BAA8B,CACrDC,SAAU3B,KAAKS,aAAamB,OAC5BC,cAAe7B,KAAKS,aAAaqB,KAAK,SACtCC,cAAe/B,KAAKH,UAAUmC,UAAUC,WACxCC,YAAa,kBACClC,KAAKS,aAAa0B,sCACjBnC,KAAKS,aAAa2B,sBAC/BC,KAAK,OACRC,MAAKC,WAACX,KAAEA,KAAFY,GAAQA,cACRC,OAAQ,mBAAEC,mBAAUC,mBAAmB7C,SAAS8C,KAAMhB,KAAMY,IAAI,SAChEC,MAAMI,IAAI7C,KAAKS,aAAaqC,UAG7B9C,KAAKS,mBACAA,aAAasC,SAAS/C,KAAKR,OAAOwD,mCAGtCnC,MAAMT,EAAGJ,KAAKyC,MAAOzC,KAAKiD,SAAShC,KAAKjB,MAAOA,KAAKkD,QAAQjC,KAAKjB,UACvEmD,MAAMC,sBAAaC,WAQ1BJ,eACQK,YAAc,KAElBxD,SAASyD,iBAAiB,iBAAiBC,SAAQC,kBACzCC,KAAOD,UAAUE,wBACjBC,UAAY5D,KAAKyC,MAAM,GAAGkB,wBAE5BC,UAAUC,KAAOH,KAAKI,OACtBF,UAAUE,MAAQJ,KAAKG,MACvBD,UAAUG,IAAML,KAAKM,QACrBJ,UAAUI,OAASN,KAAKK,MAExBT,YAAcG,mBAKjBH,YAAcA,YAOvBW,oBACUC,MAAQ,IAAIlE,KAAKH,UAAU0D,iBAAiBvD,KAAKR,OAAOe,WACzD,IAAI4D,EAAI,EAAGA,EAAID,MAAME,SAAUD,KAC5BnE,KAAKS,aAAa,KAAOyD,MAAMC,GAAI,MAC9B1B,MAAM4B,KAAK,MAAMvC,KAAK,QAASqC,EAAI,UASpDjB,kBAC0C,IAA3BlD,KAAKR,OAAOG,iBACdH,OAAOG,WAAWK,KAAKS,aAAaH,QAAQN,KAAKR,OAAOS,MAAOD,KAAKS,cAGzET,KAAKsD,YAAa,OAEZgB,UAAYtE,KAAKsD,YAAYvD,cAAc,mBAAqBC,KAAKsD,YACtEgB,UAAUC,SAASvE,KAAKS,aAAa,KACtC6D,UAAUE,YAAYxE,KAAKS,aAAa,cAIvCb,gBAAgB6E,OAAOzE,KAAKS,aAAa,QAI7CT,KAAK0E,YAAY1E,KAAKwB,cAAexB,KAAKyB,mBAAoB,iCACzDkD,iDAAoBlE,aAAaH,QAAQ,4EAAesE,KAAM,cAC9DC,SAAW7E,KAAKyB,kBAAkBqD,KAAIC,UACxCH,GAAIG,OACJC,MAAOL,sBAENnF,OAAOyF,YAAYjF,KAAKJ,gBAAiBI,KAAKS,aAAcoE,6BACvD,QAAS,mBAAoB,CACnCtE,KAAMP,KAAKS,aAAa4D,KAAK,sBAAsBa,OAAOC,OAC1DC,SAAUpF,KAAKS,aAAa4E,QAAU,EACtCC,MAAOtF,KAAKH,UAAU0D,iBAAiBvD,KAAKR,OAAOe,MAAM6D,SAC1D9B,MAAMiD,WACA/F,OAAOgG,mBAAmBC,UAAYF,YAK9C9C,MAAMiD,cACNjD,MAAQ,KAGTzC,KAAKS,oBACAA,aAAakF,YAAY3F,KAAKR,OAAOwD,sBACrCvC,aAAa,GAAGuB,UAAU0D,OAAO1F,KAAKR,OAAOwD,uBAIjDvC,aAAe,UACfS,UAAY,UACZoC,YAAc,KAKvBsC,KAAKC,aACMA,KAAK/C,SAASe,KAAOgC,KAAK1D,aAAe,EAEpD2D,KAAKD,aACMA,KAAK/C,SAASiB,IAAM8B,KAAKzD,cAAgB,EAEpD2D,wBAAwBC,eACbC,GAAIC,IAAM,EAAC,mBAAEF,UAAU,mBAAEhG,KAAKyC,SAC9B0D,GAAIC,IAAM,CAACpG,KAAK4F,KAAKK,IAAMjG,KAAK4F,KAAKM,IAAKlG,KAAK8F,KAAKG,IAAMjG,KAAK8F,KAAKI,YACpEG,KAAKC,KAAKH,GAAKA,GAAKC,GAAKA,IAEpC3E,yBACWzB,KAAKS,aAAaH,QAAQN,KAAKR,OAAOS,MAAMoE,KAAKrE,KAAKR,OAAOe,MAAMuE,KACtE,CAACO,MAAO9E,OACGP,KAAKR,OAAO+G,SAAShG,QAC7BiG,MAEX9B,YAAY+B,GAAIC,WACLD,GAAGrC,SAAWsC,GAAGtC,QACpBqC,GAAGE,OAAM,CAACC,EAAGzC,IACFyC,IAAMF,GAAGvC,iBAEhB3E,cACFqH,MAAQrH,OAAOqH,MACfC,WAAatH,OAAOsH,WAC1BD,MAAMrD,SAAQvD,WACNX,YAAY,CACZkB,aAAc,gBACdgF,mBAAoB1F,SAASC,yBAAkBE,uBAC/CA,kBAAYA,MACZM,KAAM,kBACNyC,gBAAiB,eACjBuD,SAAUhG,MACCA,KAAKqE,GAGhBK,YAAa,CAAChF,KAAMM,KAAMsE,kBAChBkC,SAAW,GACjBjH,SAASyD,iBAAiB,4BAA4BC,SAAQC,kBACpDuD,QAAUvD,UAAUmB,GAC1BmC,SAASC,SAAWC,MAAMC,KAAKzD,UAAUF,iBAAiB,oBAAoBuB,KAAIvE,MAAQA,KAAKqE,4BAGjG,SAAWkC,YAAY,GAAGK,MAAQC,KAAKC,UAAUN,6CAIhD,mBAAoB"}